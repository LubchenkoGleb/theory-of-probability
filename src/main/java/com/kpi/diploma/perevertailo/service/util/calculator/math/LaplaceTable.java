package com.kpi.diploma.perevertailo.service.util.calculator.math;

import java.util.Map;
import java.util.TreeMap;

public class LaplaceTable {
    public static final Map<Double, Double> map;

    static {
        map = new TreeMap<>();

        map.put(0.0, 0.0);
        map.put(0.01, 0.004);
        map.put(0.02, 0.008);
        map.put(0.03, 0.012);
        map.put(0.04, 0.016);
        map.put(0.05, 0.0199);
        map.put(0.06, 0.0239);
        map.put(0.07, 0.0279);
        map.put(0.08, 0.0319);
        map.put(0.09, 0.0359);
        map.put(0.1, 0.0398);
        map.put(0.11, 0.0438);
        map.put(0.12, 0.0478);
        map.put(0.13, 0.0517);
        map.put(0.14, 0.0557);
        map.put(0.15, 0.0596);
        map.put(0.16, 0.0636);
        map.put(0.17, 0.0675);
        map.put(0.18, 0.0714);
        map.put(0.19, 0.0753);
        map.put(0.2, 0.0793);
        map.put(0.21, 0.0832);
        map.put(0.22, 0.0871);
        map.put(0.23, 0.091);
        map.put(0.24, 0.0948);
        map.put(0.25, 0.0987);
        map.put(0.26, 0.1026);
        map.put(0.27, 0.1064);
        map.put(0.28, 0.1103);
        map.put(0.29, 0.1141);
        map.put(0.3, 0.1179);
        map.put(0.31, 0.1217);
        map.put(0.32, 0.1255);
        map.put(0.33, 0.1293);
        map.put(0.34, 0.1331);
        map.put(0.35, 0.1368);
        map.put(0.36, 0.1406);
        map.put(0.37, 0.1443);
        map.put(0.38, 0.148);
        map.put(0.39, 0.1517);
        map.put(0.4, 0.1554);
        map.put(0.41, 0.1591);
        map.put(0.42, 0.1628);
        map.put(0.43, 0.1664);
        map.put(0.44, 0.17);
        map.put(0.45, 0.1736);
        map.put(0.46, 0.1772);
        map.put(0.47, 0.1808);
        map.put(0.48, 0.1844);
        map.put(0.49, 0.1879);
        map.put(0.5, 0.1915);
        map.put(0.51, 0.195);
        map.put(0.52, 0.1985);
        map.put(0.53, 0.2019);
        map.put(0.54, 0.2054);
        map.put(0.55, 0.2088);
        map.put(0.56, 0.2123);
        map.put(0.57, 0.2157);
        map.put(0.58, 0.219);
        map.put(0.59, 0.2224);
        map.put(0.6, 0.2257);
        map.put(0.61, 0.2291);
        map.put(0.62, 0.2324);
        map.put(0.63, 0.2357);
        map.put(0.64, 0.2389);
        map.put(0.65, 0.2422);
        map.put(0.66, 0.2454);
        map.put(0.67, 0.2486);
        map.put(0.68, 0.2517);
        map.put(0.69, 0.2549);
        map.put(0.7, 0.258);
        map.put(0.71, 0.2611);
        map.put(0.72, 0.2642);
        map.put(0.73, 0.2673);
        map.put(0.74, 0.2703);
        map.put(0.75, 0.2734);
        map.put(0.76, 0.2764);
        map.put(0.77, 0.2794);
        map.put(0.78, 0.2823);
        map.put(0.79, 0.2852);
        map.put(0.8, 0.2881);
        map.put(0.81, 0.291);
        map.put(0.82, 0.2939);
        map.put(0.83, 0.2967);
        map.put(0.84, 0.2995);
        map.put(0.85, 0.3023);
        map.put(0.86, 0.3051);
        map.put(0.87, 0.3078);
        map.put(0.88, 0.3106);
        map.put(0.89, 0.3133);
        map.put(0.9, 0.3159);
        map.put(0.91, 0.3186);
        map.put(0.92, 0.3212);
        map.put(0.93, 0.3238);
        map.put(0.94, 0.3264);
        map.put(0.95, 0.3289);
        map.put(0.96, 0.3315);
        map.put(0.97, 0.334);
        map.put(0.98, 0.3365);
        map.put(0.99, 0.3389);
        map.put(1.0, 0.3413);
        map.put(1.01, 0.3438);
        map.put(1.02, 0.3461);
        map.put(1.03, 0.3485);
        map.put(1.04, 0.3508);
        map.put(1.05, 0.3531);
        map.put(1.06, 0.3554);
        map.put(1.07, 0.3577);
        map.put(1.08, 0.3599);
        map.put(1.09, 0.3621);
        map.put(1.1, 0.3643);
        map.put(1.11, 0.3665);
        map.put(1.12, 0.3686);
        map.put(1.13, 0.3708);
        map.put(1.14, 0.3729);
        map.put(1.15, 0.3749);
        map.put(1.16, 0.377);
        map.put(1.17, 0.379);
        map.put(1.18, 0.381);
        map.put(1.19, 0.383);
        map.put(1.2, 0.3849);
        map.put(1.21, 0.3869);
        map.put(1.22, 0.3883);
        map.put(1.23, 0.3907);
        map.put(1.24, 0.3925);
        map.put(1.25, 0.3944);
        map.put(1.26, 0.3962);
        map.put(1.27, 0.398);
        map.put(1.28, 0.3997);
        map.put(1.29, 0.4015);
        map.put(1.3, 0.4032);
        map.put(1.31, 0.4049);
        map.put(1.32, 0.4066);
        map.put(1.33, 0.4082);
        map.put(1.34, 0.4099);
        map.put(1.35, 0.4115);
        map.put(1.36, 0.4131);
        map.put(1.37, 0.4147);
        map.put(1.38, 0.4162);
        map.put(1.39, 0.4177);
        map.put(1.4, 0.4192);
        map.put(1.41, 0.4207);
        map.put(1.42, 0.4222);
        map.put(1.43, 0.4236);
        map.put(1.44, 0.4251);
        map.put(1.45, 0.4265);
        map.put(1.46, 0.4279);
        map.put(1.47, 0.4292);
        map.put(1.48, 0.4306);
        map.put(1.49, 0.4319);
        map.put(1.5, 0.4332);
        map.put(1.51, 0.4345);
        map.put(1.52, 0.4357);
        map.put(1.53, 0.437);
        map.put(1.54, 0.4382);
        map.put(1.55, 0.4394);
        map.put(1.56, 0.4406);
        map.put(1.57, 0.4418);
        map.put(1.58, 0.4429);
        map.put(1.59, 0.4441);
        map.put(1.6, 0.4452);
        map.put(1.61, 0.4463);
        map.put(1.62, 0.4474);
        map.put(1.63, 0.4484);
        map.put(1.64, 0.4495);
        map.put(1.65, 0.4505);
        map.put(1.66, 0.4515);
        map.put(1.67, 0.4525);
        map.put(1.68, 0.4535);
        map.put(1.69, 0.4545);
        map.put(1.7, 0.4554);
        map.put(1.71, 0.4564);
        map.put(1.72, 0.4573);
        map.put(1.73, 0.4582);
        map.put(1.74, 0.4591);
        map.put(1.75, 0.4599);
        map.put(1.76, 0.4608);
        map.put(1.77, 0.4616);
        map.put(1.78, 0.4625);
        map.put(1.79, 0.4633);
        map.put(1.8, 0.4641);
        map.put(1.81, 0.4649);
        map.put(1.82, 0.4656);
        map.put(1.83, 0.4664);
        map.put(1.84, 0.4671);
        map.put(1.85, 0.4678);
        map.put(1.86, 0.4686);
        map.put(1.87, 0.4693);
        map.put(1.88, 0.4699);
        map.put(1.89, 0.4706);
        map.put(1.9, 0.4713);
        map.put(1.91, 0.4719);
        map.put(1.92, 0.4726);
        map.put(1.93, 0.4732);
        map.put(1.94, 0.4738);
        map.put(1.95, 0.4744);
        map.put(1.96, 0.475);
        map.put(1.97, 0.4756);
        map.put(1.98, 0.4761);
        map.put(1.99, 0.4767);
        map.put(2.0, 0.4772);
        map.put(2.02, 0.4783);
        map.put(2.04, 0.4793);
        map.put(2.06, 0.4803);
        map.put(2.08, 0.4812);
        map.put(2.1, 0.4821);
        map.put(2.12, 0.483);
        map.put(2.14, 0.4838);
        map.put(2.16, 0.4846);
        map.put(2.18, 0.4854);
        map.put(2.2, 0.4861);
        map.put(2.22, 0.4868);
        map.put(2.24, 0.4875);
        map.put(2.26, 0.4881);
        map.put(2.28, 0.4887);
        map.put(2.3, 0.4893);
        map.put(2.32, 0.4898);
        map.put(2.34, 0.4904);
        map.put(2.36, 0.4909);
        map.put(2.38, 0.4913);
        map.put(2.4, 0.4918);
        map.put(2.42, 0.4922);
        map.put(2.44, 0.4927);
        map.put(2.46, 0.4931);
        map.put(2.48, 0.4934);
        map.put(2.5, 0.4938);
        map.put(2.52, 0.4941);
        map.put(2.54, 0.4945);
        map.put(2.56, 0.4948);
        map.put(2.58, 0.4951);
        map.put(2.6, 0.4953);
        map.put(2.62, 0.4956);
        map.put(2.64, 0.4959);
        map.put(2.66, 0.4961);
        map.put(2.68, 0.4963);
        map.put(2.7, 0.4965);
        map.put(2.72, 0.4967);
        map.put(2.74, 0.4969);
        map.put(2.76, 0.4971);
        map.put(2.78, 0.4973);
        map.put(2.8, 0.4974);
        map.put(2.82, 0.4976);
        map.put(2.84, 0.4977);
        map.put(2.86, 0.4979);
        map.put(2.88, 0.498);
        map.put(2.9, 0.4981);
        map.put(2.92, 0.4982);
        map.put(2.94, 0.4984);
        map.put(2.96, 0.4985);
        map.put(2.98, 0.4986);
        map.put(3.0, 0.49865);
        map.put(3.2, 0.49931);
        map.put(3.4, 0.49966);
        map.put(3.6, 0.49984);
        map.put(3.8, 0.49992);
        map.put(4.0, 0.49996);
        map.put(4.5, 0.49999);
        map.put(5.0, 0.49999);
    }

    public static double getNeares(double val) {

        double prev = 0, current = 0;
        int c = val < 0 ? -1 : 1;

        for (Map.Entry<Double, Double> pair : map.entrySet()) {
            current = pair.getValue();

            if (Math.abs(val) < pair.getKey()) {
                break;
            } else {
                prev = pair.getValue();
            }
        }

        double prevDelta = Math.abs(val - prev);
        double curDelta = Math.abs(val - prev);

        if(prevDelta < curDelta) {
            return c * prev;
        } else {
            return c * current;
        }
    }
}
